(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> dictionary update sequence element #0 has length 1; 2 is required"
p3
sS'layer'
p4
S'/var/www/web2py/applications/SIGESC/controllers/default.py'
p5
sS'code'
p6
S"import re\n# -*- coding: utf-8 -*-\n### required - do no delete\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\ndef index():\n    return dict()\n\ndef error():\n    return dict()\n\ndef vista_admin():\n\treturn dict()\ndef estudiantes():\n    def my_form_processing(form):\n        if not re.match('\\d{2}-\\d{5}$', form.vars.f_usbid):\n            form.errors.f_usbid = 'El formato v\xc3\xa1lido de carnet es: 00-00000'\n        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):\n            form.errors.f_cedula = 'El formato v\xc3\xa1lido de c\xc3\xa9dula es: 1232382'\n        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', form.vars.f_email):\n            form.errors.f_email = 'El formato v\xc3\xa1lido de email es example@example.com'\n        if not re.match('\\d{7,13}', form.vars.f_telefono):\n            form.errors.f_telefono = 'El formato v\xc3\xa1lido de telefono es 08002023223'\n\n    form = SQLFORM(db.t_estudiante)\n    if form.process(onvalidation=my_form_processing).accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'\n    return dict(form=form, est=db().select(db.t_estudiante.ALL))\n\ndef proponentes():\n    def my_form_processing(form):\n        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):\n            form.errors.f_cedula = 'El formato v\xc3\xa1lido de c\xc3\xa9dula es: 1232382'\n        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', form.vars.f_email):\n            form.errors.f_email = 'El formato v\xc3\xa1lido de email es example@example.com'\n        if not re.match('\\d{7,13}', form.vars.f_telefono):\n            form.errors.f_telefono = 'El formato v\xc3\xa1lido de telefono es 08002023223'\n\n    form = SQLFORM(db.t_proponente)\n    if form.process(onvalidation=my_form_processing).accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'\n    return dict(form=form, proponentes=db().select(db.t_proponente.ALL))\n\n\ndef tutores():\n    def my_form_processing(form):\n        if form.vars.f_usbid:\n            if not re.match('\\d{2}-\\d{5}$', form.vars.f_usbid) and not re.match('[a-zA-Z0-9_.+-]+', form.vars.f_usbid):\n                form.errors.f_usbid = 'usbid invalido'\n        if not re.match('[1-9][0-9]{0,8}$', form.vars.f_cedula):\n            form.errors.f_cedula = 'El formato v\xc3\xa1lido de c\xc3\xa9dula es: 1232382'\n        if not re.match('(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)', form.vars.f_email):\n            form.errors.f_email = 'El formato v\xc3\xa1lido de email es example@example.com'\n        if not re.match('\\d{7,13}', form.vars.f_telefono):\n            form.errors.f_telefono = 'El formato v\xc3\xa1lido de telefono es 08002023223'\n    form = SQLFORM(db.t_tutor)\n    if form.process(onvalidation=my_form_processing).accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'\n    return dict(form=form, tutores=db().select(db.t_tutor.ALL))\n\n\n@auth.requires_login()\ndef estado_manage():\n    form = SQLFORM.smartgrid(db.t_estado,onupdate=auth.archive)\n    return dict(form=form)\n\n#@auth.requires_login()\n\ndef sedes():\n    def my_form_processing(form):\n        if not re.match('[A-Z\xc3\x81\xc3\x89\xc3\x8d\xc3\x93\xc3\x9a\xc3\x91]|[A-Z\xc3\x81\xc3\x89\xc3\x8d\xc3\x93\xc3\x9a\xc3\x91a]|[a-z\xc3\xb1\xc3\xa1\xc3\xa9\xc3\xad\xc3\xb3\xc3\xba\xc3\xa4\xc3\xab\xc3\xaf\xc3\xb6\xc3\xbc]*$', form.vars.f_nombre):\n            form.errors.f_nombre = 'S\xc3\xb3lo puede contener letras'\n    form = SQLFORM(db.t_sede)\n    if form.process(onvalidation=my_form_processing).accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'    \n    return dict(form=form, sedes=db().select(db.t_sede.ALL))\n\ndef areas():\n    def my_form_processing(form):\n        if not re.match('[A-Z\xc3\x81\xc3\x89\xc3\x8d\xc3\x93\xc3\x9a\xc3\x91]|[A-Z\xc3\x81\xc3\x89\xc3\x8d\xc3\x93\xc3\x9a\xc3\x91a]|[a-z\xc3\xb1\xc3\xa1\xc3\xa9\xc3\xad\xc3\xb3\xc3\xba\xc3\xa4\xc3\xab\xc3\xaf\xc3\xb6\xc3\xbc]*$', form.vars.f_nombre):\n            form.errors.f_nombre = 'S\xc3\xb3lo puede contener letras'\n    form = SQLFORM(db.t_area,onupdate=auth.archive)\n    if form.process(onvalidation=my_form_processing).accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'\n    return dict(form=form, areas=db().select(db.t_area.ALL))\n\ndef sede_manage():\n    form = SQLFORM.smartgrid(db.t_sede,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef comunidad_manage():\n    form = SQLFORM.smartgrid(db.t_comunidad,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef area_manage():\n    form = SQLFORM.smartgrid(db.t_area,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef sexo_manage():\n    form = SQLFORM.smartgrid(db.t_sexo,onupdate=auth.archive)\n    return locals()\n\ndef estudiante_manage():\n    form = SQLFORM.smartgrid(db.t_estudiante.id==request.args(0))\n    if form.process().accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    else:\n        response.flash = 'please fill out the form'\n    return locals()\n\n@auth.requires_login()\ndef proponente_manage():\n    form = SQLFORM.smartgrid(db.t_proponente,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef tutor_manage():\n    form = SQLFORM.smartgrid(db.t_tutor,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef proyecto_manage():\n    form = SQLFORM.smartgrid(db.t_proyecto,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef condicion_manage():\n    form = SQLFORM.smartgrid(db.t_condicion,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef caracterisicas_manage():\n    form = SQLFORM.smartgrid(db.t_caracterisicas,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef cursa_manage():\n    form = SQLFORM.smartgrid(db.t_cursa,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef carrera_manage():\n    form = SQLFORM.smartgrid(db.t_carrera,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef tipoprop_manage():\n    form = SQLFORM.smartgrid(db.t_tipoprop,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef relacionestproy_manage():\n    form = SQLFORM.smartgrid(db.t_relacionestproy,onupdate=auth.archive)\n    return locals()\n\ndef sedesDetalles():\n    x = long (request.args[0])\n    #return dict(rows = db(db.t_sede.id==x).select())\n    record = db.t_sede(request.args[0])\n    form = SQLFORM(db.t_sede, record, deletable = True)\n    if form.process().accepted:\n        response.flash = 'form accepted'\n    elif form.errors:\n        response.flash = 'form has errors'\n    elif not record:\n        return dict('La sede ha sido eliminada')\n    return dict(form = form,rows = db(db.t_sede.id==x).select())\n\n\n    \ndef estudiantesDetalles():\n    x = long (request.args[0])\n    return dict(rows = db(db.t_estudiante.id==x).select())\n    \ndef proponentesDetalles():\n    x = long (request.args[0])\n    return dict(rows = db(db.t_proponente.id==x).select())\n    \ndef proyectosDetalles():\n    x = long (request.args[0])\n    return dict(rows = db(db.t_proyecto.id==x).select())\n    \ndef tutoresDetalles():\n    x = long (request.args[0])\n    return dict(rows = db(db.t_tutor.id==x).select())\n    \ndef areasDetalles():\n    x = long (request.args[0])\n    return dict(rows = db(db.t_area.id==x).select())\n\nresponse._vars=response._caller(sedesDetalles)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/web2py/applications/SIGESC/controllers/default.py", line 218, in <module>\n  File "/var/www/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/web2py/applications/SIGESC/controllers/default.py", line 193, in sedesDetalles\n    return dict(\'La sede ha sido eliminada\')\nValueError: dictionary update sequence element #0 has length 1; 2 is required\n'
p11
s.